require "std:classes"
require "std:datatypes/list"
require "std:datatypes/option"
require "std:datatypes/tuple"
require "std:datatypes/char"

extend show<char> {
  fn show_prec(c: char, prec: int) => switch prec {
    case 0 => char_to_string(c)
    case _ => "'" + char_to_string(c) + "'"
  }
}

fn showListHelper<A extends show>(ls: list<A>, prec: int): str => switch ls {
  case [] => ""
  case [x] => x.show_prec(prec + 1)
  case [x, ..xs] => x.show_prec(prec + 1) + ", " + showListHelper(xs, prec)
}

extend<A extends show> show<list<A>> {
  fn show_prec(self: list<A>, prec): str => 
    "[" + showListHelper(self, prec) + "]"
}

extend show<str> (priority 5) {
  fn show_prec(x: str, prec: int) => switch prec {
    case 0 => x
    case ? => "\"" + x + "\""
  }
}

extend<A extends show, B extends show> show<tuple<A, B>> {
  fn show_prec(t: tuple<A, B>, prec): str => switch t {
    case tuple(a, b) => "(" + show_prec(a, prec + 1) + ", " + show_prec(b, prec + 1) + ")"
  }
}

extend<A extends show> show<Option<A>> {
  fn show_prec(o: Option<A>, prec: int): str => switch o {
    case Some(x) => "Some(" + x.show_prec(prec + 1) + ")"
    case None => "None"
  }
}
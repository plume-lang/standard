
interface<M> monadic<M> {
  fn bind<A, B>(self: M<A>, f: fn(A): M<B>): M<B>
  fn pure<A>(value: A): M<A>
}

infixl 0 >>=
fn (>>=)<M extends monadic, A, B>(x: M<A>, f: fn(A): M<B>): M<B> => 
  x.bind(f)

fn and_then<M extends monadic, A, B>(x: M<A>, y: M<B>): M<B> => 
  x.bind(fn (_) => y)

infixl 1 >>
fn (>>)<M extends monadic, A, B>(x: M<A>, y: M<B>): M<B> => 
  x.and_then(y)

infixl 1 <<
fn (<<)<M extends monadic, A, B>(x: M<A>, y: M<B>): M<A> => 
  x.bind(fn (a) => y.bind(fn(_) => pure(a)))
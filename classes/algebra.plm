interface<A> boolean_algebra<A> {
  fn and(x: A, y: A): A
  fn or(x: A, y: A): A
  fn not(b: A): A
}

interface<A, B> convertible<A, B> with B => A {
  fn convert(x: A): Option<B>
}

interface<A> default<A> {
  fn default(): A
}

interface<A> equality<A> {
  fn (==)(a: A, b: A): bool
}

interface<A> numeric<A> {
  fn (+)(a: A, b: A): A
  fn (-)(a: A, b: A): A
}

infix 3 ^
interface<A> product<A> {
  fn (*)(a: A, b: A): A
  fn (/)(a: A, b: A): A
  fn (^)(a: A, b: int): A
}

interface<A> ordering<A> {
  fn (<)(a: A, b: A): bool
}

fn (<=)<A extends (ordering, equality, boolean_algebra)>(a: A, b: A): bool => 
  (a < b) or (a == b)

fn (>=)<A extends (ordering, boolean_algebra)>(a: A, b: A): bool =>
  not (a < b)

fn (>)<A extends (ordering, boolean_algebra, equality)>(a: A, b: A): bool =>
  not (a <= b)

fn negate<A extends (default, numeric)>(x: A): A
  => default() - x

require "std:classes"
require "tuple"

type Option<T> {
  Some(T),
  None
}

// When the condition is true, the function is called and the result
// is wrapped in a Some.
fn when<A>(cond: bool, a: fn(): A): Option<A> =>
  if cond {
    return Some(a())
  } else {
    return None
  }

// When the condition is false, the function is called and the result
// is wrapped in a Some.
fn unless<A>(cond: bool, a: fn(): A): Option<A> =>
  if cond {
    return None
  } else {
    return Some(a())
  }

extend<A> boolean_algebra<Option<A>> {
  fn and(a: Option<A>, b: Option<A>): Option<A> => switch a {
    case Some(_) => b
    case None => None
  }

  fn or(a: Option<A>, b: Option<A>): Option<A> => switch a {
    case Some(_) => a
    case None => b
  }

  fn not(a: Option<A>): Option<A> => None
}

fn or_else<A>(a: Option<A>, b: A): A => switch a {
  case Some(x) => x
  case None => b
}

extend<A> (self: Option<A>) {
  fn map<B>(f: fn(A): B): Option<B> => switch self {
    case Some(x) => Some(f(x))
    case None => None
  }
}

extend monadic<Option> {
  fn bind<A, B>(a: Option<A>, f: fn(A): Option<B>): Option<B> => switch a {
    case Some(x) => f(x)
    case None => None
  }

  fn pure<A>(a: A): Option<A> => Some(a)
}

fn simplify_option<T>(x: Option<Option<T>>): Option<T> {
  return switch x {
    case Some(Some(a)) => Some(a)
    case ? => None
  }
}

extend<A extends equality> equality<Option<A>> {
  fn (==) (a: Option<A>, b: Option<A>): bool => switch (a, b) {
    case (Some(x), Some(y)) => x == y
    case (None, None) => true
    case ? => false
  }
}

fn is_some<A>(x: Option<A>): bool => switch x {
  case Some(_) => true
  case None => false
}

fn is_none<A>(x: Option<A>): bool => not is_some(x)

fn values<A>(xs: list<Option<A>>): list<A> => switch xs {
  case [] => []
  case [Some(x), ..ys] => [x] + values(ys)
  case [None, ..ys] => values(ys)
}
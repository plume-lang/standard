require "number"
require "tuple"
require "std:classes"
require "option"
require "bool"
require "char"

native ("native", "js") "std:native" {
  list_concat<A>(x: [A], y: [A]): [A]
  ffi_get_index<A>(x: [A], i: int): Option<A>
  ffi_slice_list<A>(x: [A], start: int, end: int): [A]
}

extend<A> indexable<list<A>, A> {
  fn get_index(self: list<A>, i): Option<A> => ffi_get_index(self, i)
}

extend<A> (self: list<A>) {
  fn map<B>(f: fn(A): B): list<B> => switch self {
    case [] => []
    case [x, ..xs] => [f(x)].list_concat(xs.map(f))
  }
}

extend<A> foldable<list<A>, A> {
  fn reduce<Accumulator>(
    self: list<A>, 
    f: fn(Accumulator, A): Accumulator, 
    init: Accumulator
  ): Accumulator =>
    switch self {
      case [] => init
      case [x, ..xs] => reduce(xs, f, f(init, x))
    }
}

fn filter<A>(x: list<A>, f: fn(A): bool): list<A> => 
  x.foldl(fn (acc, y) => if (f(y)) acc.list_concat([y]) else acc, [])

extend<A extends equality> numeric<list<A>> {
  fn (+) (x, y) => x.list_concat(y)
  fn (-) (x, y) => x.filter(fn (z) => true)
}

extend<A extends equality> equality<list<A>> {
  fn (==) (x, y) => switch (x, y) {
    case ([], []) => true
    case ([], ?) => false
    case (?, []) => false
    case ([a, ..as], [b, ..bs]) => (a == b) and (as == bs)
  }
}

fn slice<A>(xs: [A], start: int): [A] => switch (xs, start) {
  case ([], ?) => []
  case ([y, ..ys], 0) => xs
  case ([?, ..ys], ?) => slice(ys, start - 1)
}

fn find<A, B, T extends foldable<(A, B)>>(x: T, f: fn(A): bool): Option<B> =>
  x.reduce(fn (acc, tp) => switch tp {
    case tuple(a, b) => if (f(a)) Some(b) else acc
  }, None)

fn take_while<A>(x: [A], f: fn(A): bool): [A] => switch x {
  case [] => []
  case [y, ..ys] => if (f(y)) take_while(ys, f).list_concat([y]) else []
}

fn drop_while<A>(x: [A], f: fn(A): bool): [A] => switch x {
  case [] => []
  case [y, ..ys] => if (f(y)) drop_while(ys, f) else x
}

fn span<A>(x: [A], f: fn(A): bool): ([A], [A]) => 
  (take_while(x, f), drop_while(x, f).slice(1))

fn split_on<A extends equality>(x: [A], y: A): [[A]] => switch x {
  case [] => []
  case ? => switch span(x, fn (z) => z != y) {
    case (a, b) => split_on(b, y).list_concat([a])
  }
}

fn init<A>(x: [A]): [A] => switch x {
  case [] => []
  case [y] => []
  case [y, ..ys] => init(ys).list_concat([y])
}

fn join<A>(x: [A], y: A): [A] => switch x {
  case [] => []
  case [z] => [z]
  case [z, ..zs] => [z, y].list_concat(join(zs, y))
}

extend<A> default<list<A>> {
  fn default() => []
}

fn reverse<A extends equality>(xs: list<A>): list<A> =>
  xs.foldl(fn (acc, z) => [z] + acc, [])

fn nub<A extends equality>(x: [A]): [A] => switch x {
  case [] => []
  case [y, ..ys] => nub(ys.filter(fn (z) => z != y)).list_concat([y])
}

fn partition<A extends equality>(xs: list<A>, f: fn(A): bool): (list<A>, list<A>) {
  left = filter(xs, f)
  right = filter(xs, fn(x) => not f(x))

  return (left, right)
}

fn sort<A extends (equality, ordering)>(xs: list<A>): list<A> => switch xs {
  case [y, ..ys] {
    lesser = filter(ys, fn(x) => x < y)
    greater = filter(ys, fn(x) => x >= y)

    return sort(lesser) + [y] + sort(greater)
  }

  case [] => []
}

fn sort_on<A extends (equality, ordering)>(xs: list<A>, f: fn(A, A): bool): list<A> => switch xs {
  case [y, ..ys] {
    lesser = ys.filter(fn(x) => f(x, y))
    greater = ys.filter(fn(x) => not f(x, y))

    return sort(lesser) + [y] + sort(greater)
  }

  case [] => []
}

fn nub_maybe<A extends equality>(xs: list<Option<A>>): list<A> => switch xs {
  case [y, ..ys] => switch y {
    case Some(v) => [v].list_concat(nub_maybe(ys))
    case None => nub_maybe(ys)
  }
  case ? => []
}

fn first<A>(xs: list<A>): Option<A> => switch xs {
  case [y, ..ys] => Some(y)
  case [] => None
}

fn tail<A>(xs: list<A>): list<A> => switch xs {
  case [?, ..ys] => ys
  case [] => []
}

fn last<A>(xs: list<A>): Option<A> =>
  xs.foldl(fn(acc, z) => Some(z), None)

fn init<A>(xs: list<A>): list<A> => switch xs {
  case [y, ..ys] => list_concat([y], init(ys))
  case [?] => []
  case [] => []
}

fn drop<A>(xs: list<A>, count: int): list<A> =>
  switch count <= 0 {
    case true => xs
    case false => switch xs {
      case [] => []
      case [?, ..ys] => ys.drop(count - 1)
    }
  }

fn take<A>(xs: list<A>, count: int): list<A> =>
  switch (xs, count) {
    case ([], ?) => []
    case ([x, ..xs], 1) => [x]
    case ([y, ..ys], ?) => [y].list_concat(take(ys, count - 1))
  }

type ControlFlow<A> {
  Continue,
  Break,
  Return(A)
}

fn each<A, T extends foldable<A>, B>(xs: T, f: fn(A): ControlFlow<B>): Option<B> {
  result = xs.reduce(fn (acc, x) => switch acc {
    case Continue => f(x)
    case Break => Break
    case Return(y) => Return(y)
  }, Continue)

  return switch result {
    case Continue => None
    case Break => None
    case Return(y) => Some(y)
  }
}